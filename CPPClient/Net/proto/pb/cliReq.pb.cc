// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cliReq.proto

#include "cliReq.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliEnterRoom_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliInitOver_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliOperate_gameProto_2eproto;
namespace lspb {
class CliReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliReq> _instance;
} _CliReq_default_instance_;
}  // namespace lspb
static void InitDefaultsscc_info_CliReq_cliReq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lspb::_CliReq_default_instance_;
    new (ptr) ::lspb::CliReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::CliReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CliReq_cliReq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CliReq_cliReq_2eproto}, {
      &scc_info_CliEnterRoom_gameProto_2eproto.base,
      &scc_info_CliInitOver_gameProto_2eproto.base,
      &scc_info_CliOperate_gameProto_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cliReq_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cliReq_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cliReq_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cliReq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, userid_),
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, moduleid_),
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, methodid_),
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, clienterroom_),
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, cliinitover_),
  PROTOBUF_FIELD_OFFSET(::lspb::CliReq, clioperate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lspb::CliReq)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lspb::_CliReq_default_instance_),
};

const char descriptor_table_protodef_cliReq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014cliReq.proto\022\004lspb\032\014lsEnum.proto\032\017game"
  "Proto.proto\"\331\001\n\006CliReq\022\016\n\006userId\030\001 \001(\005\022 "
  "\n\010moduleId\030\002 \001(\0162\016.lspb.ModuleId\022%\n\010meth"
  "odId\030\003 \001(\0162\023.lspb.ClientMsgType\022(\n\014cliEn"
  "terRoom\030e \001(\0132\022.lspb.CliEnterRoom\022&\n\013cli"
  "InitOver\030f \001(\0132\021.lspb.CliInitOver\022$\n\ncli"
  "Operate\030g \001(\0132\020.lspb.CliOperate*W\n\rClien"
  "tMsgType\022\023\n\017errorClientType\020\000\022\020\n\014cliEnte"
  "rRoom\020e\022\017\n\013cliInitOver\020f\022\016\n\ncliOperate\020g"
  "B\022\n\020org.bro.lssrv.pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cliReq_2eproto_deps[2] = {
  &::descriptor_table_gameProto_2eproto,
  &::descriptor_table_lsEnum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cliReq_2eproto_sccs[1] = {
  &scc_info_CliReq_cliReq_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cliReq_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cliReq_2eproto = {
  false, false, descriptor_table_protodef_cliReq_2eproto, "cliReq.proto", 388,
  &descriptor_table_cliReq_2eproto_once, descriptor_table_cliReq_2eproto_sccs, descriptor_table_cliReq_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_cliReq_2eproto::offsets,
  file_level_metadata_cliReq_2eproto, 1, file_level_enum_descriptors_cliReq_2eproto, file_level_service_descriptors_cliReq_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cliReq_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cliReq_2eproto)), true);
namespace lspb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cliReq_2eproto);
  return file_level_enum_descriptors_cliReq_2eproto[0];
}
bool ClientMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CliReq::InitAsDefaultInstance() {
  ::lspb::_CliReq_default_instance_._instance.get_mutable()->clienterroom_ = const_cast< ::lspb::CliEnterRoom*>(
      ::lspb::CliEnterRoom::internal_default_instance());
  ::lspb::_CliReq_default_instance_._instance.get_mutable()->cliinitover_ = const_cast< ::lspb::CliInitOver*>(
      ::lspb::CliInitOver::internal_default_instance());
  ::lspb::_CliReq_default_instance_._instance.get_mutable()->clioperate_ = const_cast< ::lspb::CliOperate*>(
      ::lspb::CliOperate::internal_default_instance());
}
class CliReq::_Internal {
 public:
  static const ::lspb::CliEnterRoom& clienterroom(const CliReq* msg);
  static const ::lspb::CliInitOver& cliinitover(const CliReq* msg);
  static const ::lspb::CliOperate& clioperate(const CliReq* msg);
};

const ::lspb::CliEnterRoom&
CliReq::_Internal::clienterroom(const CliReq* msg) {
  return *msg->clienterroom_;
}
const ::lspb::CliInitOver&
CliReq::_Internal::cliinitover(const CliReq* msg) {
  return *msg->cliinitover_;
}
const ::lspb::CliOperate&
CliReq::_Internal::clioperate(const CliReq* msg) {
  return *msg->clioperate_;
}
void CliReq::clear_clienterroom() {
  if (GetArena() == nullptr && clienterroom_ != nullptr) {
    delete clienterroom_;
  }
  clienterroom_ = nullptr;
}
void CliReq::clear_cliinitover() {
  if (GetArena() == nullptr && cliinitover_ != nullptr) {
    delete cliinitover_;
  }
  cliinitover_ = nullptr;
}
void CliReq::clear_clioperate() {
  if (GetArena() == nullptr && clioperate_ != nullptr) {
    delete clioperate_;
  }
  clioperate_ = nullptr;
}
CliReq::CliReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lspb.CliReq)
}
CliReq::CliReq(const CliReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clienterroom()) {
    clienterroom_ = new ::lspb::CliEnterRoom(*from.clienterroom_);
  } else {
    clienterroom_ = nullptr;
  }
  if (from._internal_has_cliinitover()) {
    cliinitover_ = new ::lspb::CliInitOver(*from.cliinitover_);
  } else {
    cliinitover_ = nullptr;
  }
  if (from._internal_has_clioperate()) {
    clioperate_ = new ::lspb::CliOperate(*from.clioperate_);
  } else {
    clioperate_ = nullptr;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&methodid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(methodid_));
  // @@protoc_insertion_point(copy_constructor:lspb.CliReq)
}

void CliReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CliReq_cliReq_2eproto.base);
  ::memset(&clienterroom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&methodid_) -
      reinterpret_cast<char*>(&clienterroom_)) + sizeof(methodid_));
}

CliReq::~CliReq() {
  // @@protoc_insertion_point(destructor:lspb.CliReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CliReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clienterroom_;
  if (this != internal_default_instance()) delete cliinitover_;
  if (this != internal_default_instance()) delete clioperate_;
}

void CliReq::ArenaDtor(void* object) {
  CliReq* _this = reinterpret_cast< CliReq* >(object);
  (void)_this;
}
void CliReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CliReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CliReq& CliReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliReq_cliReq_2eproto.base);
  return *internal_default_instance();
}


void CliReq::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.CliReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && clienterroom_ != nullptr) {
    delete clienterroom_;
  }
  clienterroom_ = nullptr;
  if (GetArena() == nullptr && cliinitover_ != nullptr) {
    delete cliinitover_;
  }
  cliinitover_ = nullptr;
  if (GetArena() == nullptr && clioperate_ != nullptr) {
    delete clioperate_;
  }
  clioperate_ = nullptr;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&methodid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(methodid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CliReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.ModuleId moduleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_moduleid(static_cast<::lspb::ModuleId>(val));
        } else goto handle_unusual;
        continue;
      // .lspb.ClientMsgType methodId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_methodid(static_cast<::lspb::ClientMsgType>(val));
        } else goto handle_unusual;
        continue;
      // .lspb.CliEnterRoom cliEnterRoom = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_clienterroom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.CliInitOver cliInitOver = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cliinitover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.CliOperate cliOperate = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clioperate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CliReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lspb.CliReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // .lspb.ModuleId moduleId = 2;
  if (this->moduleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_moduleid(), target);
  }

  // .lspb.ClientMsgType methodId = 3;
  if (this->methodid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_methodid(), target);
  }

  // .lspb.CliEnterRoom cliEnterRoom = 101;
  if (this->has_clienterroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::clienterroom(this), target, stream);
  }

  // .lspb.CliInitOver cliInitOver = 102;
  if (this->has_cliinitover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::cliinitover(this), target, stream);
  }

  // .lspb.CliOperate cliOperate = 103;
  if (this->has_clioperate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::clioperate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.CliReq)
  return target;
}

size_t CliReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.CliReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lspb.CliEnterRoom cliEnterRoom = 101;
  if (this->has_clienterroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clienterroom_);
  }

  // .lspb.CliInitOver cliInitOver = 102;
  if (this->has_cliinitover()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cliinitover_);
  }

  // .lspb.CliOperate cliOperate = 103;
  if (this->has_clioperate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clioperate_);
  }

  // int32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  // .lspb.ModuleId moduleId = 2;
  if (this->moduleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_moduleid());
  }

  // .lspb.ClientMsgType methodId = 3;
  if (this->methodid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_methodid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CliReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.CliReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CliReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliReq)
    MergeFrom(*source);
  }
}

void CliReq::MergeFrom(const CliReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clienterroom()) {
    _internal_mutable_clienterroom()->::lspb::CliEnterRoom::MergeFrom(from._internal_clienterroom());
  }
  if (from.has_cliinitover()) {
    _internal_mutable_cliinitover()->::lspb::CliInitOver::MergeFrom(from._internal_cliinitover());
  }
  if (from.has_clioperate()) {
    _internal_mutable_clioperate()->::lspb::CliOperate::MergeFrom(from._internal_clioperate());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.moduleid() != 0) {
    _internal_set_moduleid(from._internal_moduleid());
  }
  if (from.methodid() != 0) {
    _internal_set_methodid(from._internal_methodid());
  }
}

void CliReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.CliReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CliReq::CopyFrom(const CliReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CliReq::IsInitialized() const {
  return true;
}

void CliReq::InternalSwap(CliReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CliReq, methodid_)
      + sizeof(CliReq::methodid_)
      - PROTOBUF_FIELD_OFFSET(CliReq, clienterroom_)>(
          reinterpret_cast<char*>(&clienterroom_),
          reinterpret_cast<char*>(&other->clienterroom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CliReq::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lspb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lspb::CliReq* Arena::CreateMaybeMessage< ::lspb::CliReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lspb::CliReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
