// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameProto.proto

#include "gameProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliOperate_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_gameProto_2eproto;
namespace lspb
{
  class CliEnterRoomDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliEnterRoom> _instance;
  } _CliEnterRoom_default_instance_;
  class SrvEnterRoomDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SrvEnterRoom> _instance;
  } _SrvEnterRoom_default_instance_;
  class BGameInitDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BGameInit> _instance;
  } _BGameInit_default_instance_;
  class PlayerInfoDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
  } _PlayerInfo_default_instance_;
  class CliInitOverDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliInitOver> _instance;
  } _CliInitOver_default_instance_;
  class SrvInitOverDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SrvInitOver> _instance;
  } _SrvInitOver_default_instance_;
  class BGameStartDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BGameStart> _instance;
  } _BGameStart_default_instance_;
  class BGameFrameDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BGameFrame> _instance;
  } _BGameFrame_default_instance_;
  class CliOperateDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CliOperate> _instance;
  } _CliOperate_default_instance_;
} // namespace lspb
static void InitDefaultsscc_info_BGameFrame_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_BGameFrame_default_instance_;
    new (ptr)::lspb::BGameFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::BGameFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BGameFrame_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BGameFrame_gameProto_2eproto}, {
                                                                                                                                                     &scc_info_CliOperate_gameProto_2eproto.base,
                                                                                                                                                 }};

static void InitDefaultsscc_info_BGameInit_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_BGameInit_default_instance_;
    new (ptr)::lspb::BGameInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::BGameInit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BGameInit_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BGameInit_gameProto_2eproto}, {
                                                                                                                                                    &scc_info_PlayerInfo_gameProto_2eproto.base,
                                                                                                                                                }};

static void InitDefaultsscc_info_BGameStart_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_BGameStart_default_instance_;
    new (ptr)::lspb::BGameStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::BGameStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BGameStart_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BGameStart_gameProto_2eproto}, {}};

static void InitDefaultsscc_info_CliEnterRoom_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_CliEnterRoom_default_instance_;
    new (ptr)::lspb::CliEnterRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::CliEnterRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliEnterRoom_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CliEnterRoom_gameProto_2eproto}, {}};

static void InitDefaultsscc_info_CliInitOver_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_CliInitOver_default_instance_;
    new (ptr)::lspb::CliInitOver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::CliInitOver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliInitOver_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CliInitOver_gameProto_2eproto}, {}};

static void InitDefaultsscc_info_CliOperate_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_CliOperate_default_instance_;
    new (ptr)::lspb::CliOperate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::CliOperate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CliOperate_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CliOperate_gameProto_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfo_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_PlayerInfo_default_instance_;
    new (ptr)::lspb::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::PlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfo_gameProto_2eproto}, {}};

static void InitDefaultsscc_info_SrvEnterRoom_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_SrvEnterRoom_default_instance_;
    new (ptr)::lspb::SrvEnterRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::SrvEnterRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrvEnterRoom_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SrvEnterRoom_gameProto_2eproto}, {}};

static void InitDefaultsscc_info_SrvInitOver_gameProto_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::lspb::_SrvInitOver_default_instance_;
    new (ptr)::lspb::SrvInitOver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::SrvInitOver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrvInitOver_gameProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SrvInitOver_gameProto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gameProto_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_gameProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_gameProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gameProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::CliEnterRoom, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::lspb::CliEnterRoom, roomid_),
    PROTOBUF_FIELD_OFFSET(::lspb::CliEnterRoom, name_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::SrvEnterRoom, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::lspb::SrvEnterRoom, playerid_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::BGameInit, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::lspb::BGameInit, seed_),
    PROTOBUF_FIELD_OFFSET(::lspb::BGameInit, plist_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::PlayerInfo, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::lspb::PlayerInfo, playerid_),
    PROTOBUF_FIELD_OFFSET(::lspb::PlayerInfo, name_),
    PROTOBUF_FIELD_OFFSET(::lspb::PlayerInfo, startpoint_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::CliInitOver, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::SrvInitOver, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::BGameStart, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::BGameFrame, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::lspb::BGameFrame, fid_),
    PROTOBUF_FIELD_OFFSET(::lspb::BGameFrame, operlist_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::lspb::CliOperate, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::lspb::CliOperate, direction_),
    PROTOBUF_FIELD_OFFSET(::lspb::CliOperate, isfire_),
    PROTOBUF_FIELD_OFFSET(::lspb::CliOperate, playerid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::lspb::CliEnterRoom)},
    {7, -1, sizeof(::lspb::SrvEnterRoom)},
    {13, -1, sizeof(::lspb::BGameInit)},
    {20, -1, sizeof(::lspb::PlayerInfo)},
    {28, -1, sizeof(::lspb::CliInitOver)},
    {33, -1, sizeof(::lspb::SrvInitOver)},
    {38, -1, sizeof(::lspb::BGameStart)},
    {43, -1, sizeof(::lspb::BGameFrame)},
    {50, -1, sizeof(::lspb::CliOperate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_CliEnterRoom_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_SrvEnterRoom_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_BGameInit_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_PlayerInfo_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_CliInitOver_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_SrvInitOver_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_BGameStart_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_BGameFrame_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::lspb::_CliOperate_default_instance_),
};

const char descriptor_table_protodef_gameProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\017gameProto.proto\022\004lspb\",\n\014CliEnterRoom\022"
    "\016\n\006roomId\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\" \n\014SrvEnte"
    "rRoom\022\020\n\010playerId\030\001 \001(\005\":\n\tBGameInit\022\014\n\004"
    "seed\030\001 \001(\005\022\037\n\005pList\030\002 \003(\0132\020.lspb.PlayerI"
    "nfo\"@\n\nPlayerInfo\022\020\n\010playerId\030\001 \001(\005\022\014\n\004n"
    "ame\030\002 \001(\t\022\022\n\nstartPoint\030\003 \001(\005\"\r\n\013CliInit"
    "Over\"\r\n\013SrvInitOver\"\014\n\nBGameStart\"=\n\nBGa"
    "meFrame\022\013\n\003fId\030\001 \001(\005\022\"\n\010operList\030\002 \003(\0132\020"
    ".lspb.CliOperate\"A\n\nCliOperate\022\021\n\tdirect"
    "ion\030\001 \001(\t\022\016\n\006isFire\030\002 \001(\010\022\020\n\010playerId\030\003 "
    "\001(\005B\022\n\020org.bro.lssrv.pbb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_gameProto_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_gameProto_2eproto_sccs[9] = {
    &scc_info_BGameFrame_gameProto_2eproto.base,
    &scc_info_BGameInit_gameProto_2eproto.base,
    &scc_info_BGameStart_gameProto_2eproto.base,
    &scc_info_CliEnterRoom_gameProto_2eproto.base,
    &scc_info_CliInitOver_gameProto_2eproto.base,
    &scc_info_CliOperate_gameProto_2eproto.base,
    &scc_info_PlayerInfo_gameProto_2eproto.base,
    &scc_info_SrvEnterRoom_gameProto_2eproto.base,
    &scc_info_SrvInitOver_gameProto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gameProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameProto_2eproto = {
    false,
    false,
    descriptor_table_protodef_gameProto_2eproto,
    "gameProto.proto",
    431,
    &descriptor_table_gameProto_2eproto_once,
    descriptor_table_gameProto_2eproto_sccs,
    descriptor_table_gameProto_2eproto_deps,
    9,
    0,
    schemas,
    file_default_instances,
    TableStruct_gameProto_2eproto::offsets,
    file_level_metadata_gameProto_2eproto,
    9,
    file_level_enum_descriptors_gameProto_2eproto,
    file_level_service_descriptors_gameProto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gameProto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gameProto_2eproto)), true);
namespace lspb
{

  // ===================================================================

  void CliEnterRoom::InitAsDefaultInstance()
  {
  }
  class CliEnterRoom::_Internal
  {
  public:
  };

  CliEnterRoom::CliEnterRoom(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.CliEnterRoom)
  }
  CliEnterRoom::CliEnterRoom(const CliEnterRoom &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_name().empty())
    {
      name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
                GetArena());
    }
    roomid_ = from.roomid_;
    // @@protoc_insertion_point(copy_constructor:lspb.CliEnterRoom)
  }

  void CliEnterRoom::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CliEnterRoom_gameProto_2eproto.base);
    name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    roomid_ = 0;
  }

  CliEnterRoom::~CliEnterRoom()
  {
    // @@protoc_insertion_point(destructor:lspb.CliEnterRoom)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void CliEnterRoom::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void CliEnterRoom::ArenaDtor(void *object)
  {
    CliEnterRoom *_this = reinterpret_cast<CliEnterRoom *>(object);
    (void)_this;
  }
  void CliEnterRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void CliEnterRoom::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const CliEnterRoom &CliEnterRoom::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliEnterRoom_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void CliEnterRoom::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.CliEnterRoom)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    roomid_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *CliEnterRoom::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lspb.CliEnterRoom.name"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *CliEnterRoom::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.CliEnterRoom)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 roomId = 1;
    if (this->roomid() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
    }

    // string name = 2;
    if (this->name().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lspb.CliEnterRoom.name");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_name(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.CliEnterRoom)
    return target;
  }

  size_t CliEnterRoom::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.CliEnterRoom)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string name = 2;
    if (this->name().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_name());
    }

    // int32 roomId = 1;
    if (this->roomid() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_roomid());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void CliEnterRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.CliEnterRoom)
    GOOGLE_DCHECK_NE(&from, this);
    const CliEnterRoom *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliEnterRoom>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliEnterRoom)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliEnterRoom)
      MergeFrom(*source);
    }
  }

  void CliEnterRoom::MergeFrom(const CliEnterRoom &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliEnterRoom)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.name().size() > 0)
    {
      _internal_set_name(from._internal_name());
    }
    if (from.roomid() != 0)
    {
      _internal_set_roomid(from._internal_roomid());
    }
  }

  void CliEnterRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.CliEnterRoom)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void CliEnterRoom::CopyFrom(const CliEnterRoom &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliEnterRoom)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool CliEnterRoom::IsInitialized() const
  {
    return true;
  }

  void CliEnterRoom::InternalSwap(CliEnterRoom *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(roomid_, other->roomid_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata CliEnterRoom::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void SrvEnterRoom::InitAsDefaultInstance()
  {
  }
  class SrvEnterRoom::_Internal
  {
  public:
  };

  SrvEnterRoom::SrvEnterRoom(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.SrvEnterRoom)
  }
  SrvEnterRoom::SrvEnterRoom(const SrvEnterRoom &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    playerid_ = from.playerid_;
    // @@protoc_insertion_point(copy_constructor:lspb.SrvEnterRoom)
  }

  void SrvEnterRoom::SharedCtor()
  {
    playerid_ = 0;
  }

  SrvEnterRoom::~SrvEnterRoom()
  {
    // @@protoc_insertion_point(destructor:lspb.SrvEnterRoom)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void SrvEnterRoom::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void SrvEnterRoom::ArenaDtor(void *object)
  {
    SrvEnterRoom *_this = reinterpret_cast<SrvEnterRoom *>(object);
    (void)_this;
  }
  void SrvEnterRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void SrvEnterRoom::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const SrvEnterRoom &SrvEnterRoom::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SrvEnterRoom_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void SrvEnterRoom::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.SrvEnterRoom)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    playerid_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *SrvEnterRoom::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *SrvEnterRoom::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.SrvEnterRoom)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 playerId = 1;
    if (this->playerid() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.SrvEnterRoom)
    return target;
  }

  size_t SrvEnterRoom::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.SrvEnterRoom)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // int32 playerId = 1;
    if (this->playerid() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_playerid());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void SrvEnterRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.SrvEnterRoom)
    GOOGLE_DCHECK_NE(&from, this);
    const SrvEnterRoom *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SrvEnterRoom>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.SrvEnterRoom)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.SrvEnterRoom)
      MergeFrom(*source);
    }
  }

  void SrvEnterRoom::MergeFrom(const SrvEnterRoom &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.SrvEnterRoom)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.playerid() != 0)
    {
      _internal_set_playerid(from._internal_playerid());
    }
  }

  void SrvEnterRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.SrvEnterRoom)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void SrvEnterRoom::CopyFrom(const SrvEnterRoom &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.SrvEnterRoom)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool SrvEnterRoom::IsInitialized() const
  {
    return true;
  }

  void SrvEnterRoom::InternalSwap(SrvEnterRoom *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(playerid_, other->playerid_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata SrvEnterRoom::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void BGameInit::InitAsDefaultInstance()
  {
  }
  class BGameInit::_Internal
  {
  public:
  };

  BGameInit::BGameInit(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        plist_(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.BGameInit)
  }
  BGameInit::BGameInit(const BGameInit &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        plist_(from.plist_)
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    seed_ = from.seed_;
    // @@protoc_insertion_point(copy_constructor:lspb.BGameInit)
  }

  void BGameInit::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BGameInit_gameProto_2eproto.base);
    seed_ = 0;
  }

  BGameInit::~BGameInit()
  {
    // @@protoc_insertion_point(destructor:lspb.BGameInit)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void BGameInit::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void BGameInit::ArenaDtor(void *object)
  {
    BGameInit *_this = reinterpret_cast<BGameInit *>(object);
    (void)_this;
  }
  void BGameInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void BGameInit::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const BGameInit &BGameInit::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BGameInit_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void BGameInit::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.BGameInit)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    plist_.Clear();
    seed_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *BGameInit::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // int32 seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // repeated .lspb.PlayerInfo pList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          ptr -= 1;
          do
          {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *BGameInit::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.BGameInit)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 seed = 1;
    if (this->seed() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seed(), target);
    }

    // repeated .lspb.PlayerInfo pList = 2;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_plist_size());
         i < n; i++)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          InternalWriteMessage(2, this->_internal_plist(i), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.BGameInit)
    return target;
  }

  size_t BGameInit::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.BGameInit)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .lspb.PlayerInfo pList = 2;
    total_size += 1UL * this->_internal_plist_size();
    for (const auto &msg : this->plist_)
    {
      total_size +=
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // int32 seed = 1;
    if (this->seed() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_seed());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void BGameInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.BGameInit)
    GOOGLE_DCHECK_NE(&from, this);
    const BGameInit *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BGameInit>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.BGameInit)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.BGameInit)
      MergeFrom(*source);
    }
  }

  void BGameInit::MergeFrom(const BGameInit &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.BGameInit)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    plist_.MergeFrom(from.plist_);
    if (from.seed() != 0)
    {
      _internal_set_seed(from._internal_seed());
    }
  }

  void BGameInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.BGameInit)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void BGameInit::CopyFrom(const BGameInit &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.BGameInit)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool BGameInit::IsInitialized() const
  {
    return true;
  }

  void BGameInit::InternalSwap(BGameInit *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    plist_.InternalSwap(&other->plist_);
    swap(seed_, other->seed_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata BGameInit::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void PlayerInfo::InitAsDefaultInstance()
  {
  }
  class PlayerInfo::_Internal
  {
  public:
  };

  PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.PlayerInfo)
  }
  PlayerInfo::PlayerInfo(const PlayerInfo &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_name().empty())
    {
      name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
                GetArena());
    }
    ::memcpy(&playerid_, &from.playerid_,
             static_cast<size_t>(reinterpret_cast<char *>(&startpoint_) -
                                 reinterpret_cast<char *>(&playerid_)) +
                 sizeof(startpoint_));
    // @@protoc_insertion_point(copy_constructor:lspb.PlayerInfo)
  }

  void PlayerInfo::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInfo_gameProto_2eproto.base);
    name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&playerid_, 0, static_cast<size_t>(reinterpret_cast<char *>(&startpoint_) - reinterpret_cast<char *>(&playerid_)) + sizeof(startpoint_));
  }

  PlayerInfo::~PlayerInfo()
  {
    // @@protoc_insertion_point(destructor:lspb.PlayerInfo)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void PlayerInfo::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void PlayerInfo::ArenaDtor(void *object)
  {
    PlayerInfo *_this = reinterpret_cast<PlayerInfo *>(object);
    (void)_this;
  }
  void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void PlayerInfo::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const PlayerInfo &PlayerInfo::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void PlayerInfo::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&playerid_, 0, static_cast<size_t>(reinterpret_cast<char *>(&startpoint_) - reinterpret_cast<char *>(&playerid_)) + sizeof(startpoint_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *PlayerInfo::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lspb.PlayerInfo.name"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // int32 startPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          startpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *PlayerInfo::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 playerId = 1;
    if (this->playerid() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
    }

    // string name = 2;
    if (this->name().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lspb.PlayerInfo.name");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_name(), target);
    }

    // int32 startPoint = 3;
    if (this->startpoint() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_startpoint(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.PlayerInfo)
    return target;
  }

  size_t PlayerInfo::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.PlayerInfo)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string name = 2;
    if (this->name().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_name());
    }

    // int32 playerId = 1;
    if (this->playerid() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_playerid());
    }

    // int32 startPoint = 3;
    if (this->startpoint() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_startpoint());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.PlayerInfo)
    GOOGLE_DCHECK_NE(&from, this);
    const PlayerInfo *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.PlayerInfo)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.PlayerInfo)
      MergeFrom(*source);
    }
  }

  void PlayerInfo::MergeFrom(const PlayerInfo &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.PlayerInfo)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.name().size() > 0)
    {
      _internal_set_name(from._internal_name());
    }
    if (from.playerid() != 0)
    {
      _internal_set_playerid(from._internal_playerid());
    }
    if (from.startpoint() != 0)
    {
      _internal_set_startpoint(from._internal_startpoint());
    }
  }

  void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.PlayerInfo)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void PlayerInfo::CopyFrom(const PlayerInfo &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.PlayerInfo)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool PlayerInfo::IsInitialized() const
  {
    return true;
  }

  void PlayerInfo::InternalSwap(PlayerInfo *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(PlayerInfo, startpoint_) + sizeof(PlayerInfo::startpoint_) - PROTOBUF_FIELD_OFFSET(PlayerInfo, playerid_)>(
        reinterpret_cast<char *>(&playerid_),
        reinterpret_cast<char *>(&other->playerid_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void CliInitOver::InitAsDefaultInstance()
  {
  }
  class CliInitOver::_Internal
  {
  public:
  };

  CliInitOver::CliInitOver(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.CliInitOver)
  }
  CliInitOver::CliInitOver(const CliInitOver &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:lspb.CliInitOver)
  }

  void CliInitOver::SharedCtor()
  {
  }

  CliInitOver::~CliInitOver()
  {
    // @@protoc_insertion_point(destructor:lspb.CliInitOver)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void CliInitOver::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void CliInitOver::ArenaDtor(void *object)
  {
    CliInitOver *_this = reinterpret_cast<CliInitOver *>(object);
    (void)_this;
  }
  void CliInitOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void CliInitOver::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const CliInitOver &CliInitOver::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliInitOver_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void CliInitOver::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.CliInitOver)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *CliInitOver::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      if ((tag & 7) == 4 || tag == 0)
      {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *CliInitOver::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.CliInitOver)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.CliInitOver)
    return target;
  }

  size_t CliInitOver::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.CliInitOver)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void CliInitOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.CliInitOver)
    GOOGLE_DCHECK_NE(&from, this);
    const CliInitOver *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliInitOver>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliInitOver)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliInitOver)
      MergeFrom(*source);
    }
  }

  void CliInitOver::MergeFrom(const CliInitOver &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliInitOver)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;
  }

  void CliInitOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.CliInitOver)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void CliInitOver::CopyFrom(const CliInitOver &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliInitOver)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool CliInitOver::IsInitialized() const
  {
    return true;
  }

  void CliInitOver::InternalSwap(CliInitOver *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata CliInitOver::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void SrvInitOver::InitAsDefaultInstance()
  {
  }
  class SrvInitOver::_Internal
  {
  public:
  };

  SrvInitOver::SrvInitOver(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.SrvInitOver)
  }
  SrvInitOver::SrvInitOver(const SrvInitOver &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:lspb.SrvInitOver)
  }

  void SrvInitOver::SharedCtor()
  {
  }

  SrvInitOver::~SrvInitOver()
  {
    // @@protoc_insertion_point(destructor:lspb.SrvInitOver)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void SrvInitOver::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void SrvInitOver::ArenaDtor(void *object)
  {
    SrvInitOver *_this = reinterpret_cast<SrvInitOver *>(object);
    (void)_this;
  }
  void SrvInitOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void SrvInitOver::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const SrvInitOver &SrvInitOver::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SrvInitOver_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void SrvInitOver::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.SrvInitOver)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *SrvInitOver::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      if ((tag & 7) == 4 || tag == 0)
      {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *SrvInitOver::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.SrvInitOver)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.SrvInitOver)
    return target;
  }

  size_t SrvInitOver::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.SrvInitOver)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void SrvInitOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.SrvInitOver)
    GOOGLE_DCHECK_NE(&from, this);
    const SrvInitOver *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SrvInitOver>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.SrvInitOver)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.SrvInitOver)
      MergeFrom(*source);
    }
  }

  void SrvInitOver::MergeFrom(const SrvInitOver &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.SrvInitOver)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;
  }

  void SrvInitOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.SrvInitOver)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void SrvInitOver::CopyFrom(const SrvInitOver &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.SrvInitOver)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool SrvInitOver::IsInitialized() const
  {
    return true;
  }

  void SrvInitOver::InternalSwap(SrvInitOver *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata SrvInitOver::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void BGameStart::InitAsDefaultInstance()
  {
  }
  class BGameStart::_Internal
  {
  public:
  };

  BGameStart::BGameStart(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.BGameStart)
  }
  BGameStart::BGameStart(const BGameStart &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:lspb.BGameStart)
  }

  void BGameStart::SharedCtor()
  {
  }

  BGameStart::~BGameStart()
  {
    // @@protoc_insertion_point(destructor:lspb.BGameStart)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void BGameStart::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void BGameStart::ArenaDtor(void *object)
  {
    BGameStart *_this = reinterpret_cast<BGameStart *>(object);
    (void)_this;
  }
  void BGameStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void BGameStart::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const BGameStart &BGameStart::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BGameStart_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void BGameStart::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.BGameStart)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *BGameStart::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      if ((tag & 7) == 4 || tag == 0)
      {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *BGameStart::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.BGameStart)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.BGameStart)
    return target;
  }

  size_t BGameStart::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.BGameStart)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void BGameStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.BGameStart)
    GOOGLE_DCHECK_NE(&from, this);
    const BGameStart *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BGameStart>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.BGameStart)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.BGameStart)
      MergeFrom(*source);
    }
  }

  void BGameStart::MergeFrom(const BGameStart &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.BGameStart)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;
  }

  void BGameStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.BGameStart)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void BGameStart::CopyFrom(const BGameStart &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.BGameStart)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool BGameStart::IsInitialized() const
  {
    return true;
  }

  void BGameStart::InternalSwap(BGameStart *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata BGameStart::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void BGameFrame::InitAsDefaultInstance()
  {
  }
  class BGameFrame::_Internal
  {
  public:
  };

  BGameFrame::BGameFrame(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        operlist_(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.BGameFrame)
  }
  BGameFrame::BGameFrame(const BGameFrame &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        operlist_(from.operlist_)
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    fid_ = from.fid_;
    // @@protoc_insertion_point(copy_constructor:lspb.BGameFrame)
  }

  void BGameFrame::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BGameFrame_gameProto_2eproto.base);
    fid_ = 0;
  }

  BGameFrame::~BGameFrame()
  {
    // @@protoc_insertion_point(destructor:lspb.BGameFrame)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void BGameFrame::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void BGameFrame::ArenaDtor(void *object)
  {
    BGameFrame *_this = reinterpret_cast<BGameFrame *>(object);
    (void)_this;
  }
  void BGameFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void BGameFrame::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const BGameFrame &BGameFrame::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BGameFrame_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void BGameFrame::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.BGameFrame)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    operlist_.Clear();
    fid_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *BGameFrame::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // int32 fId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // repeated .lspb.CliOperate operList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          ptr -= 1;
          do
          {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *BGameFrame::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.BGameFrame)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int32 fId = 1;
    if (this->fid() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fid(), target);
    }

    // repeated .lspb.CliOperate operList = 2;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_operlist_size());
         i < n; i++)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          InternalWriteMessage(2, this->_internal_operlist(i), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.BGameFrame)
    return target;
  }

  size_t BGameFrame::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.BGameFrame)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .lspb.CliOperate operList = 2;
    total_size += 1UL * this->_internal_operlist_size();
    for (const auto &msg : this->operlist_)
    {
      total_size +=
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // int32 fId = 1;
    if (this->fid() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_fid());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void BGameFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.BGameFrame)
    GOOGLE_DCHECK_NE(&from, this);
    const BGameFrame *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BGameFrame>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.BGameFrame)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.BGameFrame)
      MergeFrom(*source);
    }
  }

  void BGameFrame::MergeFrom(const BGameFrame &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.BGameFrame)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    operlist_.MergeFrom(from.operlist_);
    if (from.fid() != 0)
    {
      _internal_set_fid(from._internal_fid());
    }
  }

  void BGameFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.BGameFrame)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void BGameFrame::CopyFrom(const BGameFrame &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.BGameFrame)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool BGameFrame::IsInitialized() const
  {
    return true;
  }

  void BGameFrame::InternalSwap(BGameFrame *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    operlist_.InternalSwap(&other->operlist_);
    swap(fid_, other->fid_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata BGameFrame::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void CliOperate::InitAsDefaultInstance()
  {
  }
  class CliOperate::_Internal
  {
  public:
  };

  CliOperate::CliOperate(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:lspb.CliOperate)
  }
  CliOperate::CliOperate(const CliOperate &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_direction().empty())
    {
      direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_direction(),
                     GetArena());
    }
    ::memcpy(&isfire_, &from.isfire_,
             static_cast<size_t>(reinterpret_cast<char *>(&playerid_) -
                                 reinterpret_cast<char *>(&isfire_)) +
                 sizeof(playerid_));
    // @@protoc_insertion_point(copy_constructor:lspb.CliOperate)
  }

  void CliOperate::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CliOperate_gameProto_2eproto.base);
    direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&isfire_, 0, static_cast<size_t>(reinterpret_cast<char *>(&playerid_) - reinterpret_cast<char *>(&isfire_)) + sizeof(playerid_));
  }

  CliOperate::~CliOperate()
  {
    // @@protoc_insertion_point(destructor:lspb.CliOperate)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void CliOperate::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void CliOperate::ArenaDtor(void *object)
  {
    CliOperate *_this = reinterpret_cast<CliOperate *>(object);
    (void)_this;
  }
  void CliOperate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void CliOperate::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const CliOperate &CliOperate::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CliOperate_gameProto_2eproto.base);
    return *internal_default_instance();
  }

  void CliOperate::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:lspb.CliOperate)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&isfire_, 0, static_cast<size_t>(reinterpret_cast<char *>(&playerid_) - reinterpret_cast<char *>(&isfire_)) + sizeof(playerid_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *CliOperate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // string direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
        {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lspb.CliOperate.direction"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // bool isFire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          isfire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // int32 playerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *CliOperate::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:lspb.CliOperate)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string direction = 1;
    if (this->direction().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lspb.CliOperate.direction");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_direction(), target);
    }

    // bool isFire = 2;
    if (this->isfire() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isfire(), target);
    }

    // int32 playerId = 3;
    if (this->playerid() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playerid(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:lspb.CliOperate)
    return target;
  }

  size_t CliOperate::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:lspb.CliOperate)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string direction = 1;
    if (this->direction().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_direction());
    }

    // bool isFire = 2;
    if (this->isfire() != 0)
    {
      total_size += 1 + 1;
    }

    // int32 playerId = 3;
    if (this->playerid() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                        this->_internal_playerid());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void CliOperate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:lspb.CliOperate)
    GOOGLE_DCHECK_NE(&from, this);
    const CliOperate *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CliOperate>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.CliOperate)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.CliOperate)
      MergeFrom(*source);
    }
  }

  void CliOperate::MergeFrom(const CliOperate &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:lspb.CliOperate)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.direction().size() > 0)
    {
      _internal_set_direction(from._internal_direction());
    }
    if (from.isfire() != 0)
    {
      _internal_set_isfire(from._internal_isfire());
    }
    if (from.playerid() != 0)
    {
      _internal_set_playerid(from._internal_playerid());
    }
  }

  void CliOperate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:lspb.CliOperate)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void CliOperate::CopyFrom(const CliOperate &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:lspb.CliOperate)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool CliOperate::IsInitialized() const
  {
    return true;
  }

  void CliOperate::InternalSwap(CliOperate *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(CliOperate, playerid_) + sizeof(CliOperate::playerid_) - PROTOBUF_FIELD_OFFSET(CliOperate, isfire_)>(
        reinterpret_cast<char *>(&isfire_),
        reinterpret_cast<char *>(&other->isfire_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata CliOperate::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // @@protoc_insertion_point(namespace_scope)
} // namespace lspb
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::lspb::CliEnterRoom *Arena::CreateMaybeMessage<::lspb::CliEnterRoom>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::CliEnterRoom>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::SrvEnterRoom *Arena::CreateMaybeMessage<::lspb::SrvEnterRoom>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::SrvEnterRoom>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::BGameInit *Arena::CreateMaybeMessage<::lspb::BGameInit>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::BGameInit>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::PlayerInfo *Arena::CreateMaybeMessage<::lspb::PlayerInfo>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::PlayerInfo>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::CliInitOver *Arena::CreateMaybeMessage<::lspb::CliInitOver>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::CliInitOver>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::SrvInitOver *Arena::CreateMaybeMessage<::lspb::SrvInitOver>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::SrvInitOver>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::BGameStart *Arena::CreateMaybeMessage<::lspb::BGameStart>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::BGameStart>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::BGameFrame *Arena::CreateMaybeMessage<::lspb::BGameFrame>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::BGameFrame>(arena);
}
template <>
PROTOBUF_NOINLINE ::lspb::CliOperate *Arena::CreateMaybeMessage<::lspb::CliOperate>(Arena *arena)
{
  return Arena::CreateMessageInternal<::lspb::CliOperate>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
