// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvRes.proto

#include "srvRes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BGameFrame_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BGameInit_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BGameStart_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrvEnterRoom_gameProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gameProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrvInitOver_gameProto_2eproto;
namespace lspb {
class SrvResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SrvRes> _instance;
} _SrvRes_default_instance_;
}  // namespace lspb
static void InitDefaultsscc_info_SrvRes_srvRes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lspb::_SrvRes_default_instance_;
    new (ptr) ::lspb::SrvRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lspb::SrvRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SrvRes_srvRes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SrvRes_srvRes_2eproto}, {
      &scc_info_SrvEnterRoom_gameProto_2eproto.base,
      &scc_info_SrvInitOver_gameProto_2eproto.base,
      &scc_info_BGameInit_gameProto_2eproto.base,
      &scc_info_BGameStart_gameProto_2eproto.base,
      &scc_info_BGameFrame_gameProto_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srvRes_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_srvRes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srvRes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srvRes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, methodid_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, result_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, errstr_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, srventerroom_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, srvinitover_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, bgameinit_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, bgamestart_),
  PROTOBUF_FIELD_OFFSET(::lspb::SrvRes, bgameframe_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lspb::SrvRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lspb::_SrvRes_default_instance_),
};

const char descriptor_table_protodef_srvRes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014srvRes.proto\022\004lspb\032\014lsEnum.proto\032\017game"
  "Proto.proto\"\237\002\n\006SrvRes\022\"\n\010methodId\030\001 \001(\016"
  "2\020.lspb.SrvMsgType\022\034\n\006result\030\002 \001(\0162\014.lsp"
  "b.Result\022\016\n\006errStr\030\003 \001(\t\022(\n\014srvEnterRoom"
  "\030e \001(\0132\022.lspb.SrvEnterRoom\022&\n\013srvInitOve"
  "r\030f \001(\0132\021.lspb.SrvInitOver\022#\n\tbGameInit\030"
  "\351\007 \001(\0132\017.lspb.BGameInit\022%\n\nbGameStart\030\352\007"
  " \001(\0132\020.lspb.BGameStart\022%\n\nbGameFrame\030\353\007 "
  "\001(\0132\020.lspb.BGameFrame*v\n\nSrvMsgType\022\023\n\017e"
  "rrorServerType\020\000\022\020\n\014srvEnterRoom\020e\022\017\n\013sr"
  "vInitOver\020f\022\016\n\tbGameInit\020\351\007\022\017\n\nbGameStar"
  "t\020\352\007\022\017\n\nbGameFrame\020\353\007B\022\n\020org.bro.lssrv.p"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srvRes_2eproto_deps[2] = {
  &::descriptor_table_gameProto_2eproto,
  &::descriptor_table_lsEnum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srvRes_2eproto_sccs[1] = {
  &scc_info_SrvRes_srvRes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srvRes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvRes_2eproto = {
  false, false, descriptor_table_protodef_srvRes_2eproto, "srvRes.proto", 489,
  &descriptor_table_srvRes_2eproto_once, descriptor_table_srvRes_2eproto_sccs, descriptor_table_srvRes_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_srvRes_2eproto::offsets,
  file_level_metadata_srvRes_2eproto, 1, file_level_enum_descriptors_srvRes_2eproto, file_level_service_descriptors_srvRes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srvRes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srvRes_2eproto)), true);
namespace lspb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SrvMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvRes_2eproto);
  return file_level_enum_descriptors_srvRes_2eproto[0];
}
bool SrvMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 1001:
    case 1002:
    case 1003:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SrvRes::InitAsDefaultInstance() {
  ::lspb::_SrvRes_default_instance_._instance.get_mutable()->srventerroom_ = const_cast< ::lspb::SrvEnterRoom*>(
      ::lspb::SrvEnterRoom::internal_default_instance());
  ::lspb::_SrvRes_default_instance_._instance.get_mutable()->srvinitover_ = const_cast< ::lspb::SrvInitOver*>(
      ::lspb::SrvInitOver::internal_default_instance());
  ::lspb::_SrvRes_default_instance_._instance.get_mutable()->bgameinit_ = const_cast< ::lspb::BGameInit*>(
      ::lspb::BGameInit::internal_default_instance());
  ::lspb::_SrvRes_default_instance_._instance.get_mutable()->bgamestart_ = const_cast< ::lspb::BGameStart*>(
      ::lspb::BGameStart::internal_default_instance());
  ::lspb::_SrvRes_default_instance_._instance.get_mutable()->bgameframe_ = const_cast< ::lspb::BGameFrame*>(
      ::lspb::BGameFrame::internal_default_instance());
}
class SrvRes::_Internal {
 public:
  static const ::lspb::SrvEnterRoom& srventerroom(const SrvRes* msg);
  static const ::lspb::SrvInitOver& srvinitover(const SrvRes* msg);
  static const ::lspb::BGameInit& bgameinit(const SrvRes* msg);
  static const ::lspb::BGameStart& bgamestart(const SrvRes* msg);
  static const ::lspb::BGameFrame& bgameframe(const SrvRes* msg);
};

const ::lspb::SrvEnterRoom&
SrvRes::_Internal::srventerroom(const SrvRes* msg) {
  return *msg->srventerroom_;
}
const ::lspb::SrvInitOver&
SrvRes::_Internal::srvinitover(const SrvRes* msg) {
  return *msg->srvinitover_;
}
const ::lspb::BGameInit&
SrvRes::_Internal::bgameinit(const SrvRes* msg) {
  return *msg->bgameinit_;
}
const ::lspb::BGameStart&
SrvRes::_Internal::bgamestart(const SrvRes* msg) {
  return *msg->bgamestart_;
}
const ::lspb::BGameFrame&
SrvRes::_Internal::bgameframe(const SrvRes* msg) {
  return *msg->bgameframe_;
}
void SrvRes::clear_srventerroom() {
  if (GetArena() == nullptr && srventerroom_ != nullptr) {
    delete srventerroom_;
  }
  srventerroom_ = nullptr;
}
void SrvRes::clear_srvinitover() {
  if (GetArena() == nullptr && srvinitover_ != nullptr) {
    delete srvinitover_;
  }
  srvinitover_ = nullptr;
}
void SrvRes::clear_bgameinit() {
  if (GetArena() == nullptr && bgameinit_ != nullptr) {
    delete bgameinit_;
  }
  bgameinit_ = nullptr;
}
void SrvRes::clear_bgamestart() {
  if (GetArena() == nullptr && bgamestart_ != nullptr) {
    delete bgamestart_;
  }
  bgamestart_ = nullptr;
}
void SrvRes::clear_bgameframe() {
  if (GetArena() == nullptr && bgameframe_ != nullptr) {
    delete bgameframe_;
  }
  bgameframe_ = nullptr;
}
SrvRes::SrvRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lspb.SrvRes)
}
SrvRes::SrvRes(const SrvRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errstr().empty()) {
    errstr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errstr(),
      GetArena());
  }
  if (from._internal_has_srventerroom()) {
    srventerroom_ = new ::lspb::SrvEnterRoom(*from.srventerroom_);
  } else {
    srventerroom_ = nullptr;
  }
  if (from._internal_has_srvinitover()) {
    srvinitover_ = new ::lspb::SrvInitOver(*from.srvinitover_);
  } else {
    srvinitover_ = nullptr;
  }
  if (from._internal_has_bgameinit()) {
    bgameinit_ = new ::lspb::BGameInit(*from.bgameinit_);
  } else {
    bgameinit_ = nullptr;
  }
  if (from._internal_has_bgamestart()) {
    bgamestart_ = new ::lspb::BGameStart(*from.bgamestart_);
  } else {
    bgamestart_ = nullptr;
  }
  if (from._internal_has_bgameframe()) {
    bgameframe_ = new ::lspb::BGameFrame(*from.bgameframe_);
  } else {
    bgameframe_ = nullptr;
  }
  ::memcpy(&methodid_, &from.methodid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&methodid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:lspb.SrvRes)
}

void SrvRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SrvRes_srvRes_2eproto.base);
  errstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&srventerroom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&srventerroom_)) + sizeof(result_));
}

SrvRes::~SrvRes() {
  // @@protoc_insertion_point(destructor:lspb.SrvRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SrvRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete srventerroom_;
  if (this != internal_default_instance()) delete srvinitover_;
  if (this != internal_default_instance()) delete bgameinit_;
  if (this != internal_default_instance()) delete bgamestart_;
  if (this != internal_default_instance()) delete bgameframe_;
}

void SrvRes::ArenaDtor(void* object) {
  SrvRes* _this = reinterpret_cast< SrvRes* >(object);
  (void)_this;
}
void SrvRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SrvRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SrvRes& SrvRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SrvRes_srvRes_2eproto.base);
  return *internal_default_instance();
}


void SrvRes::Clear() {
// @@protoc_insertion_point(message_clear_start:lspb.SrvRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errstr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && srventerroom_ != nullptr) {
    delete srventerroom_;
  }
  srventerroom_ = nullptr;
  if (GetArena() == nullptr && srvinitover_ != nullptr) {
    delete srvinitover_;
  }
  srvinitover_ = nullptr;
  if (GetArena() == nullptr && bgameinit_ != nullptr) {
    delete bgameinit_;
  }
  bgameinit_ = nullptr;
  if (GetArena() == nullptr && bgamestart_ != nullptr) {
    delete bgamestart_;
  }
  bgamestart_ = nullptr;
  if (GetArena() == nullptr && bgameframe_ != nullptr) {
    delete bgameframe_;
  }
  bgameframe_ = nullptr;
  ::memset(&methodid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&methodid_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SrvRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lspb.SrvMsgType methodId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_methodid(static_cast<::lspb::SrvMsgType>(val));
        } else goto handle_unusual;
        continue;
      // .lspb.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::lspb::Result>(val));
        } else goto handle_unusual;
        continue;
      // string errStr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lspb.SrvRes.errStr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.SrvEnterRoom srvEnterRoom = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_srventerroom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.SrvInitOver srvInitOver = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_srvinitover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.BGameInit bGameInit = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgameinit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.BGameStart bGameStart = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgamestart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lspb.BGameFrame bGameFrame = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgameframe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SrvRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lspb.SrvRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lspb.SrvMsgType methodId = 1;
  if (this->methodid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_methodid(), target);
  }

  // .lspb.Result result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // string errStr = 3;
  if (this->errstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errstr().data(), static_cast<int>(this->_internal_errstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lspb.SrvRes.errStr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errstr(), target);
  }

  // .lspb.SrvEnterRoom srvEnterRoom = 101;
  if (this->has_srventerroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::srventerroom(this), target, stream);
  }

  // .lspb.SrvInitOver srvInitOver = 102;
  if (this->has_srvinitover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::srvinitover(this), target, stream);
  }

  // .lspb.BGameInit bGameInit = 1001;
  if (this->has_bgameinit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::bgameinit(this), target, stream);
  }

  // .lspb.BGameStart bGameStart = 1002;
  if (this->has_bgamestart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1002, _Internal::bgamestart(this), target, stream);
  }

  // .lspb.BGameFrame bGameFrame = 1003;
  if (this->has_bgameframe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1003, _Internal::bgameframe(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lspb.SrvRes)
  return target;
}

size_t SrvRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lspb.SrvRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errStr = 3;
  if (this->errstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errstr());
  }

  // .lspb.SrvEnterRoom srvEnterRoom = 101;
  if (this->has_srventerroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srventerroom_);
  }

  // .lspb.SrvInitOver srvInitOver = 102;
  if (this->has_srvinitover()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srvinitover_);
  }

  // .lspb.BGameInit bGameInit = 1001;
  if (this->has_bgameinit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgameinit_);
  }

  // .lspb.BGameStart bGameStart = 1002;
  if (this->has_bgamestart()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgamestart_);
  }

  // .lspb.BGameFrame bGameFrame = 1003;
  if (this->has_bgameframe()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bgameframe_);
  }

  // .lspb.SrvMsgType methodId = 1;
  if (this->methodid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_methodid());
  }

  // .lspb.Result result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrvRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lspb.SrvRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SrvRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SrvRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lspb.SrvRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lspb.SrvRes)
    MergeFrom(*source);
  }
}

void SrvRes::MergeFrom(const SrvRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lspb.SrvRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errstr().size() > 0) {
    _internal_set_errstr(from._internal_errstr());
  }
  if (from.has_srventerroom()) {
    _internal_mutable_srventerroom()->::lspb::SrvEnterRoom::MergeFrom(from._internal_srventerroom());
  }
  if (from.has_srvinitover()) {
    _internal_mutable_srvinitover()->::lspb::SrvInitOver::MergeFrom(from._internal_srvinitover());
  }
  if (from.has_bgameinit()) {
    _internal_mutable_bgameinit()->::lspb::BGameInit::MergeFrom(from._internal_bgameinit());
  }
  if (from.has_bgamestart()) {
    _internal_mutable_bgamestart()->::lspb::BGameStart::MergeFrom(from._internal_bgamestart());
  }
  if (from.has_bgameframe()) {
    _internal_mutable_bgameframe()->::lspb::BGameFrame::MergeFrom(from._internal_bgameframe());
  }
  if (from.methodid() != 0) {
    _internal_set_methodid(from._internal_methodid());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void SrvRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lspb.SrvRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrvRes::CopyFrom(const SrvRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lspb.SrvRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrvRes::IsInitialized() const {
  return true;
}

void SrvRes::InternalSwap(SrvRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  errstr_.Swap(&other->errstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SrvRes, result_)
      + sizeof(SrvRes::result_)
      - PROTOBUF_FIELD_OFFSET(SrvRes, srventerroom_)>(
          reinterpret_cast<char*>(&srventerroom_),
          reinterpret_cast<char*>(&other->srventerroom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SrvRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lspb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lspb::SrvRes* Arena::CreateMaybeMessage< ::lspb::SrvRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lspb::SrvRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
