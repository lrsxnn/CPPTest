// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsEnum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lsEnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lsEnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lsEnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lsEnum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsEnum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace lspb {

enum ModuleId : int {
  UnknownModel = 0,
  Game = 1,
  ModuleId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModuleId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModuleId_IsValid(int value);
constexpr ModuleId ModuleId_MIN = UnknownModel;
constexpr ModuleId ModuleId_MAX = Game;
constexpr int ModuleId_ARRAYSIZE = ModuleId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModuleId_descriptor();
template<typename T>
inline const std::string& ModuleId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModuleId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModuleId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModuleId_descriptor(), enum_t_value);
}
inline bool ModuleId_Parse(
    const std::string& name, ModuleId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModuleId>(
    ModuleId_descriptor(), name, value);
}
enum Result : int {
  success = 0,
  err = 1,
  errNoMethod = 2,
  errNulMsg = 3,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = success;
constexpr Result Result_MAX = errNulMsg;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    const std::string& name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lspb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lspb::ModuleId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lspb::ModuleId>() {
  return ::lspb::ModuleId_descriptor();
}
template <> struct is_proto_enum< ::lspb::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lspb::Result>() {
  return ::lspb::Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lsEnum_2eproto
